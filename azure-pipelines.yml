trigger:
  branches:
    include:
      - master

pool: Default

variables:
  ACR_LOGIN_SERVER: zzeydwqgimagescanacr.azurecr.io
  IMAGE_NAME: 'sampleapp'
  IMAGE_TAG: 'latest'
  SCANNER_TOOL_PATH: '/usr/local/bin/trivy'  # Adjust this if using a different scanner

stages:
  - stage: BuildAndPush
    jobs:
      - job: Build
        steps:
          - task: Docker@2
            inputs:
              containerRegistry: 'docker-service-con'   # Use your Docker Registry service connection name
              repository: '$(IMAGE_NAME)'
              command: 'buildAndPush'
              Dockerfile: '**/Dockerfile'
              tags: |
                $(IMAGE_TAG)

  - stage: ScanImage
    dependsOn: BuildAndPush
    jobs:
      - job: Scan
        steps:
          - script: |
              echo "Installing Trivy..."
              curl -sfL https://raw.githubusercontent.com/aquasecurity/trivy/main/contrib/install.sh | sh -s -- -b /usr/local/bin
              echo "Trivy installed successfully:"
              trivy --version
            displayName: 'Install Trivy'
          
          - script: |
              echo "Scanning the image with Trivy..."
              $SCANNER_TOOL_PATH image $ACR_LOGIN_SERVER/$IMAGE_NAME:$IMAGE_TAG 
              $SCANNER_TOOL_PATH image $ACR_LOGIN_SERVER/$IMAGE_NAME:$IMAGE_TAG > scan_report.txt
            displayName: 'Run Image Scan'

          - task: PublishPipelineArtifact@1
            inputs:
              targetPath: 'scan_report.txt'
              artifactName: 'SecurityReports'
            displayName: 'Publish Scan Report'

  - stage: ReviewScanResults
    dependsOn: ScanImage
    jobs:
      - job: EvaluateScan
        steps:
          - script: |
              echo "Checking for critical or high vulnerabilities..."
              critical=$(grep -i "CRITICAL" scan_report.txt | wc -l)
              high=$(grep -i "HIGH" scan_report.txt | wc -l)
              echo $critical
              echo $high
              if [ "$critical" -gt 0 ] || [ "$high" -gt 0 ]; then
                echo "Critical or high vulnerabilities found. Failing pipeline."
                exit 1  # Fail the pipeline if critical or high vulnerabilities are found
              else
                echo "No critical or high vulnerabilities found. Approved for deployment."
              fi
            displayName: 'Evaluate Scan Report'

  - stage: Deploy
    dependsOn: ReviewScanResults
    condition: succeeded()  # Only run if the previous stage was successful
    jobs:
      - job: DeployApp
        steps:
          - script: |
              echo "Deploying application..."
              # Add deployment commands here (e.g., Helm deploy, kubectl apply, etc.)
            displayName: 'Deploy Application'
